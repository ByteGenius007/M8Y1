import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from config import TOKEN
from test_questions import questions
from career_logic import recommend_profession
from database import init_db, save_user
from config import ADMIN_ID

# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---
class Quiz(StatesGroup):
    answering = State()

ADMIN_ID = ADMIN_ID

# --- –ö–Ω–æ–ø–∫–∏ ---
yes_no_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]],
    resize_keyboard=True
)

class AddProfession(StatesGroup):
    title = State()
    category = State()
    description = State()


bot = Bot(token=TOKEN)
dp = Dispatcher()
init_db()

# --- –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç ---
@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await state.clear()
    text = (
        "üëã *–ü—Ä–∏–≤–µ—Ç!*\n\n"
        "–Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º. üß≠\n"
        "–û—Ç–≤–µ—á–∞–π –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã *–î–∞* –∏–ª–∏ *–ù–µ—Ç*, –∞ –≤ –∫–æ–Ω—Ü–µ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π.\n\n"
        "üß† –ì–æ—Ç–æ–≤? –¢–æ–≥–¥–∞ –Ω–∞—á–Ω—ë–º!"
    )
    await message.answer(text, reply_markup=yes_no_kb, parse_mode="Markdown")
    await state.set_state(Quiz.answering)
    await state.update_data(current_q=0, scores={})
    await message.answer(questions[0][0], reply_markup=yes_no_kb)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ ---
@dp.message(Quiz.answering, F.text.lower().in_(["–¥–∞", "–Ω–µ—Ç"]))
async def handle_quiz(message: Message, state: FSMContext):
    data = await state.get_data()
    q_index = data["current_q"]
    scores = data["scores"]
    answer_text = message.text.lower()

    current_question = questions[q_index]
    question_text, direction, weight = current_question

    if answer_text == "–¥–∞" and direction:
        scores[direction] = scores.get(direction, 0) + weight  # –£—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Å

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    q_index += 1
    if q_index < len(questions):
        await state.update_data(current_q=q_index, scores=scores)
        await message.answer(questions[q_index][0], reply_markup=yes_no_kb)
    else:
        await state.clear()

        if not scores:
            await message.answer("–¢—ã –¥–∞–ª –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã ü§∑‚Äç‚ôÇÔ∏è –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞ /retry")
            return

        best = max(scores, key=scores.get)
        await message.answer(f"–ü–æ —Ç–≤–æ–∏–º –æ—Ç–≤–µ—Ç–∞–º —Ç–µ–±–µ –ø–æ–¥–æ–π–¥—ë—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: *{best.capitalize()}*", parse_mode="Markdown")
        save_user(message.from_user.id, best)

        results = recommend_profession(best)
        for res in results:
            await message.answer(res, parse_mode="Markdown")

        await message.answer("–•–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â—ë —Ä–∞–∑? –ù–∞–ø–∏—à–∏ /retry")


@dp.message(Command("add_profession"))
async def cmd_add_profession(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –¢—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:")
    await state.set_state(AddProfession.title)


@dp.message(AddProfession.title)
async def set_prof_name(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("""–£–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –ª—é–¥–∏, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ, —ç–∫–æ–Ω–æ–º–∏–∫–∞, –º–µ–¥–∏—Ü–∏–Ω–∞,
        –≤–æ–µ–Ω–Ω–æ–µ –¥–µ–ª–æ, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –Ω–∞—É–∫–∞,
        –∏—Å–∫—É—Å—Å—Ç–≤–æ, —Å–ø–æ—Ä—Ç, —ç–∫–æ–ª–æ–≥–∏—è, –∏–Ω–∂–µ–Ω–µ—Ä–∏—è, –ª–æ–≥–∏—Å—Ç–∏–∫–∞):""")
    await state.set_state(AddProfession.category)


@dp.message(AddProfession.category)
async def set_prof_category(message: Message, state: FSMContext):
    category = message.text.lower()
    allowed_categories = [
        "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–ª—é–¥–∏", "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "—ç–∫–æ–Ω–æ–º–∏–∫–∞", "–º–µ–¥–∏—Ü–∏–Ω–∞",
        "–≤–æ–µ–Ω–Ω–æ–µ –¥–µ–ª–æ", "–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–Ω–∞—É–∫–∞",
        "–∏—Å–∫—É—Å—Å—Ç–≤–æ", "—Å–ø–æ—Ä—Ç", "—ç–∫–æ–ª–æ–≥–∏—è", "–∏–Ω–∂–µ–Ω–µ—Ä–∏—è", "–ª–æ–≥–∏—Å—Ç–∏–∫–∞"
    ]
    if category not in allowed_categories:
        await message.answer("‚ö† –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: " + ", ".join(allowed_categories))
        return

    await state.update_data(category=category)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:")
    await state.set_state(AddProfession.description)


@dp.message(AddProfession.description)
async def save_profession(message: Message, state: FSMContext):
    data = await state.get_data()
    title = data["title"]
    category = data["category"]
    description = message.text

    print("–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:")
    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
    print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
    print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}")


    from database import add_profession
    add_profession(category, title, description)

    await message.answer("‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()


@dp.message(Command("help"))
async def help_command(message: Message):
    text = (
        "üß≠ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/add\\_profession ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é \\(–¥–ª—è –∞–¥–º–∏–Ω–∞\\)\n"
        "/retry ‚Äî –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â—ë —Ä–∞–∑"
    )
    await message.answer(text, parse_mode="MarkdownV2")



@dp.message(Command("retry"))
async def retry_test(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(Quiz.answering)
    await state.update_data(current_q=0, scores={})
    await message.answer("–ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ! –û—Ç–≤–µ—Ç—å '–î–∞' –∏–ª–∏ '–ù–µ—Ç' üëá")
    await message.answer(questions[0][0], reply_markup=yes_no_kb)


# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


