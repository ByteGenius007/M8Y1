import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from config import TOKEN
from test_questions import questions
from career_logic import recommend_profession
from database import init_db, save_user

# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---
class Quiz(StatesGroup):
    answering = State()

# --- –ö–Ω–æ–ø–∫–∏ ---
yes_no_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]],
    resize_keyboard=True
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=TOKEN)
dp = Dispatcher()
init_db()

# --- –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç ---
@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é.\n–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–±–∏—Ä–∞—è '–î–∞' –∏–ª–∏ '–ù–µ—Ç'."
    )
    await state.set_state(Quiz.answering)
    await state.update_data(current_q=0, scores={})
    await message.answer(questions[0]["text"], reply_markup=yes_no_kb)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ ---
@dp.message(Quiz.answering, F.text.lower().in_(["–¥–∞", "–Ω–µ—Ç"]))
async def handle_quiz(message: Message, state: FSMContext):
    data = await state.get_data()
    q_index = data["current_q"]
    scores = data["scores"]
    answer_text = message.text.lower()

    current_question = questions[q_index]

    # –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–π –∫–ª—é—á (yes –∏–ª–∏ no)
    if answer_text == "–¥–∞":
        direction = current_question.get("yes")
    else:
        direction = current_question.get("no")

    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª, –µ—Å–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ—Å—Ç—å
    if direction:
        scores[direction] = scores.get(direction, 0) + 1

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    q_index += 1
    if q_index < len(questions):
        await state.update_data(current_q=q_index, scores=scores)
        await message.answer(questions[q_index]["text"], reply_markup=yes_no_kb)
    else:
        await state.clear()

        if not scores:
            await message.answer("–¢—ã –¥–∞–ª –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã ü§∑‚Äç‚ôÇÔ∏è –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞ /start")
            return

        best = max(scores, key=scores.get)
        await message.answer(f"–ü–æ —Ç–≤–æ–∏–º –æ—Ç–≤–µ—Ç–∞–º —Ç–µ–±–µ –ø–æ–¥–æ–π–¥—ë—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: *{best.capitalize()}*", parse_mode="Markdown")
        save_user(message.from_user.id, best)

        results = recommend_profession(best)
        for res in results:
            await message.answer(res, parse_mode="Markdown")

        await message.answer("–•–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â—ë —Ä–∞–∑? –ù–∞–ø–∏—à–∏ /start")


# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


